{"version":3,"sources":["Components/Filter/Filter.module.css","redux/phonebook/contacts-actions.js","Components/ContactForm/ContactForm.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/phonebook/contacts-reducer.js","redux/store.js","index.js","Components/ContactForm/ContactForm.module.css","Components/ContactList/ContactList.module.css"],"names":["module","exports","contactsActions","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","connect","dispatch","onAddContact","useState","setName","setNumber","handleChange","event","target","value","className","styles","form","method","onSubmit","preventDefault","label","input","type","pattern","title","required","onChange","btn","state","contacts","items","filter","onDeleteContact","list","contact","toLowerCase","includes","map","item","onClick","e","App","totalContacts","defaultProps","visibleContacts","length","createReducer","actions","some","alert","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","newstore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.c5ee52b5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2MXx_\",\"btn\":\"Filter_btn__1xbVw\"};","import shortid from 'shortid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n// import ContactTypes from './contacts-types';\r\n\r\n// const addContact = (name, number) => ({\r\n//     type: ContactTypes.ADD,\r\n//     payload: { \r\n//         id: shortid.generate(),\r\n//         name,\r\n//         number,\r\n//     }\r\n// });\r\n\r\n// createAction(type, prepareAction)\r\nconst addContact = createAction('contacts/add', (name, number) => {    return { \r\n    payload: {\r\n        id: shortid.generate(),\r\n        name,\r\n        number,\r\n    }\r\n  }\r\n});\r\n\r\n// const deleteContact = contactId => ({\r\n//     type: ContactTypes.DELETE,\r\n//     payload: contactId,\r\n// });\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\n// const changeFilter = value => ({\r\n//     type: ContactTypes.CHANGE_FILTER,\r\n//     payload: value,\r\n// });\r\nconst changeFilter = createAction('contscts/changeFilter');\r\n\r\nconst contactsActions = {\r\n    addContact, \r\n    deleteContact, \r\n    changeFilter\r\n  };\r\n\r\nexport default contactsActions;","import React, { useState } from 'react';\r\n// import useLocalStorage from '../../hooks/useLocalStorage';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/phonebook/contacts-actions';\r\nimport styles from './ContactForm.module.css';\r\n\r\nfunction ContactForm({ onAddContact }) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');  \r\n\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n        onAddContact(name, number);\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n    return(\r\n        <form className={styles.form} method=\"post\" onSubmit={handleSubmit}>\r\n            <label className={styles.label}>Name: \r\n            <input className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-ЯІіЇїҐґ]+(([' -][a-zA-Zа-яА-ЯІіЇїҐґ ])?[a-zA-Zа-яА-ЯІіЇїҐґ]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={handleChange}\r\n            value={name}\r\n          />\r\n            </label>\r\n            <label className={styles.label}>Number: \r\n                <input type=\"tel\" name=\"number\"\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\" \r\n                className={styles.input} value={number} onChange={handleChange} required />\r\n            </label>\r\n            <button type=\"submit\" \r\n            className={styles.btn}>\r\n                Add contact\r\n            </button>\r\n        </form>\r\n    )\r\n}\r\nContactForm.propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.number,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onAddContact: (name, number) => dispatch(contactsActions.addContact(name, number)),\r\n})\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/phonebook/contacts-actions';\r\nimport styles from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, filter, onDeleteContact }) => (\r\n    <ul className={styles.list}>\r\n        {contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase())).map( ({ id, name, number }) => (\r\n            <li key={id} className={styles.item}>\r\n                <p className={styles.name}>{name}: <span>{number}</span></p>\r\n                <button type=\"button\" className={styles.btn} onClick={()=> onDeleteContact(id)}>Delete</button>\r\n            </li>\r\n        ) )\r\n        }\r\n    </ul>\r\n);\r\nContactList.propTypes = {\r\n    id: PropTypes.any,\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDeleteContact: (id) => dispatch(contactsActions.deleteContact(id)),\r\n});\r\nconst mapStateToProps = state => ({\r\n    contacts: state.contacts.items,\r\n    filter: state.contacts.filter,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/phonebook/contacts-actions';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n    <label className={styles.label}>\r\n        Find contacts by name\r\n        <input className={styles.input} type=\"text\" value={value} onChange={onChange}/>\r\n    </label>\r\n);\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onChange: e => dispatch(contactsActions.changeFilter(e.target.value)),\r\n});\r\nconst mapStateToProps = state => ({\r\n    value: state.filter,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './App.css';\r\nimport { connect } from 'react-redux';\r\nimport ContactForm from './Components/ContactForm';\r\nimport ContactList from './Components/ContactList';\r\nimport Filter from './Components/Filter';\r\n\r\nfunction App({ totalContacts }) {\r\n   return (\r\n    <div className=\"App\">\r\n      <h1>Phonebook</h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts (total: {totalContacts}) </h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>        \r\n  ); \r\n}\r\nApp.defaultProps = {\r\n  visibleContacts: null,\r\n}\r\nApp.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape(\r\n      {\r\n        id: PropTypes.any.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      })\r\n  ),\r\n  filter: PropTypes.string,\r\n  totalContacts: PropTypes.number,\r\n  visibleContacts: PropTypes.number,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: state.contacts.filter,\r\n    totalContacts: state.contacts.items.length,\r\n}};\r\n\r\nexport default connect(mapStateToProps)(App);\r\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\n// import ContactsTypes from './contacts-types';\r\nimport actions from './contacts-actions';\r\n\r\n// const initialContacts = [\r\n//     {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n//     {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n//     {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n//     {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n//   ]\r\n\r\n// const items = (state = (JSON.parse(window.localStorage.getItem('contacts')) ?? initialContacts), { type, payload }) => {\r\n//     switch (type) {\r\n//         case ContactsTypes.ADD:\r\n//             const isInContacts = state.some(contact => contact.name === payload.name);\r\n//             if (isInContacts) { \r\n//                 alert(`${payload.name} is already in contacts.`); return state;\r\n//             }\r\n//             const renewableState = [...state, payload];\r\n//             window.localStorage.setItem('contacts', JSON.stringify(renewableState));             \r\n//             return renewableState; \r\n       \r\n//         case ContactsTypes.DELETE:\r\n//             const filtredState = state.filter(contact => contact.id !== payload)\r\n//             window.localStorage.setItem('contacts', JSON.stringify(filtredState));\r\n//             return filtredState;\r\n    \r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\n// const startState = (JSON.parse(window.localStorage.getItem('contacts')) ?? initialContacts);\r\nconst items = createReducer([], {\r\n    [actions.addContact]: (state, { payload }) => {\r\n        const isInContacts = state.some(contact => contact.name === payload.name);\r\n            if (isInContacts) { \r\n                alert(`${payload.name} is already in contacts.`); return state;\r\n            }\r\n            const renewableState = [...state, payload];\r\n            // window.localStorage.setItem('contacts', JSON.stringify(renewableState));             \r\n            return renewableState; \r\n    },\r\n    [actions.deleteContact]: (state, { payload }) => {\r\n        const filtredState = state.filter(contact => contact.id !== payload)\r\n            // window.localStorage.setItem('contacts', JSON.stringify(filtredState));\r\n            return filtredState;\r\n    }\r\n});\r\n           \r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//     switch (type) {\r\n//         case ContactsTypes.CHANGE_FILTER:                     \r\n//             return payload; \r\n       \r\n//         default:\r\n//             return state;\r\n//     }\r\n// };\r\nconst filter = createReducer('', {\r\n    [actions.changeFilter]: (_, { payload }) => {\r\n        return payload; \r\n    }\r\n});\r\n\r\nexport default combineReducers({ items, filter });","// import { combineReducers, createStore } from 'redux';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './phonebook/contacts-reducer';\r\nimport { logger } from 'redux-logger';\r\nimport {\r\n    persistStore, \r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER, \r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }), logger, \r\n];\r\n\r\nconst contactsPersistConfig = {\r\n    key: 'contacts',\r\n    storage,\r\n    blacklist: ['filter'],\r\n};\r\n// const rootReducer = combineReducers({\r\n//     contacts: contactsReducer,\r\n// });\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: persistReducer(contactsPersistConfig, contactsReducer)}, \r\n        middleware,    \r\n        // devTools: true,\r\n        devTools: process.env.NODE_ENV === 'development',\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nconst newstore = { store, persistor };\r\n\r\nexport default newstore;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={<h3>Загружаем локальное хранилище</h3>} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__vKspi\",\"label\":\"ContactForm_label__2DohH\",\"input\":\"ContactForm_input__Sthp7\",\"btn\":\"ContactForm_btn__YbD5M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3QLo_\",\"item\":\"ContactList_item__1Zm5b\",\"name\":\"ContactList_name__3JdAg\",\"btn\":\"ContactList_btn__LhST-\"};"],"sourceRoot":""}